
;; Function scale_samples (scale_samples.default, funcdef_no=23, decl_uid=3954, cgraph_uid=24, symbol_order=23)

=== Function Name: '__builtin_cpu_supports' ===
=== Function Count: '0' ===
=== Function Name: '__builtin_cpu_init' ===
=== Function Count: '0' ===
=== Function Name: 'scale_samples.resolver' ===
=== Function Count: '0' ===
# .MEM_2 = VDEF <.MEM_1(D)>
__builtin_cpu_init ();
_3 = __builtin_cpu_supports (&"popcnt"[0]);
if (_3 > 0)
# VUSE <.MEM_2>
return scale_samples.popcnt;
# VUSE <.MEM_2>
return scale_samples;
Statement Count for Function 'scale_samples.resolver': 5
=== Function Name: 'scale_samples' ===
=== Function Count: '1' ===
=== Function Name: 'scale_samples.popcnt' ===
=== Function Count: '1' ===
# DEBUG BEGIN_STMT
# DEBUG BEGIN_STMT
# DEBUG x => 0
# DEBUG BEGIN_STMT
_2 = (long unsigned int) x_1;
_3 = _2 * 2;
_5 = in_4(D) + _3;
# VUSE <.MEM_19>
_6 = *_5;
_7 = (int) _6;
_9 = volume_8(D) * 32767;
_10 = _9 / 100;
_11 = _10 << 1;
_12 = _7 * _11;
_13 = _12 >> 16;
_15 = out_14(D) + _3;
_16 = (short int) _13;
# .MEM_21 = VDEF <.MEM_19>
*_15 = _16;
# DEBUG BEGIN_STMT
x_17 = x_1 + 1;
# DEBUG x => x_17
# DEBUG x => x_1
# DEBUG BEGIN_STMT
if (x_1 < cnt_18(D))
# VUSE <.MEM_19>
return;
Statement Count for Function 'scale_samples.popcnt': 24
=== Function Name: 'printf' ===
=== Function Count: '2' ===
=== Function Name: 'vol_createsample' ===
=== Function Count: '2' ===
=== Function Name: 'calloc' ===
=== Function Count: '2' ===
=== Function Name: 'main' ===
=== Function Count: '2' ===
# DEBUG BEGIN_STMT
# DEBUG BEGIN_STMT
# DEBUG ttl => 0
# DEBUG BEGIN_STMT
# DEBUG BEGIN_STMT
# DEBUG BEGIN_STMT
# .MEM_2 = VDEF <.MEM_1(D)>
in_3 = calloc (50000000, 2);
# DEBUG in => in_3
# DEBUG BEGIN_STMT
# .MEM_4 = VDEF <.MEM_2>
out_5 = calloc (50000000, 2);
# DEBUG out => out_5
# DEBUG BEGIN_STMT
# .MEM_6 = VDEF <.MEM_4>
vol_createsample (in_3, 50000000);
# DEBUG BEGIN_STMT
# .MEM_7 = VDEF <.MEM_6>
scale_samples (in_3, out_5, 50000000, 50);
# DEBUG BEGIN_STMT
# DEBUG buff => out_5
# DEBUG samples => 50000000
# DEBUG INLINE_ENTRY sum_sample
# DEBUG BEGIN_STMT
# DEBUG BEGIN_STMT
# DEBUG BEGIN_STMT
# DEBUG x => 0
# DEBUG BEGIN_STMT
_10 = (long unsigned int) x_8;
_11 = _10 * 2;
_12 = out_5 + _11;
# VUSE <.MEM_7>
_13 = *_12;
_14 = (int) _13;
t_16 = _14 + t_15;
# DEBUG t => t_16
# DEBUG BEGIN_STMT
x_17 = x_8 + 1;
# DEBUG x => x_17
# DEBUG x => x_8
# DEBUG t => t_15
# DEBUG BEGIN_STMT
if (x_8 != 50000000)
# DEBUG BEGIN_STMT
# DEBUG buff => NULL
# DEBUG samples => NULL
# DEBUG x => NULL
# DEBUG t => NULL
# DEBUG ttl => t_15
# DEBUG BEGIN_STMT
# .MEM_9 = VDEF <.MEM_7>
printf ("Result: %d\n", t_15);
# DEBUG BEGIN_STMT
# VUSE <.MEM_9>
return 0;
Statement Count for Function 'main': 48
=== Function Name: 'scale_samples' ===
=== Function Count: '3' ===
# DEBUG BEGIN_STMT
# DEBUG BEGIN_STMT
# DEBUG x => 0
# DEBUG BEGIN_STMT
if (cnt_16(D) > 0)
_6 = volume_18(D) * 32767;
_7 = _6 / 100;
_8 = _7 << 1;
_32 = (unsigned int) cnt_16(D);
_31 = _32 + 4294967295;
if (_31 > 6)
_29 = in_17(D) + 2;
_28 = out_19(D) - _29;
_27 = (sizetype) _28;
if (_27 > 12)
bnd.8_66 = _32 >> 3;
_74 = {_8, _8, _8, _8};
_35 = (sizetype) bnd.8_66;
_94 = _35 * 16;
# DEBUG x => NULL
# DEBUG BEGIN_STMT
# VUSE <.MEM_25>
vect__4.13_71 = MEM <vector(8) short int> [(int16_t *)in_17(D) + ivtmp.33_50 * 1];
vect__5.14_72 = [vec_unpack_lo_expr] vect__4.13_71;
vect__5.14_73 = [vec_unpack_hi_expr] vect__4.13_71;
vect__9.15_76 = vect__5.14_72 * _74;
vect__9.15_77 = vect__5.14_73 * _74;
vect__10.16_78 = vect__9.15_76 >> 16;
vect__10.16_79 = vect__9.15_77 >> 16;
vect__12.17_80 = VEC_PACK_TRUNC_EXPR <vect__10.16_78, vect__10.16_79>;
# .MEM_83 = VDEF <.MEM_25>
MEM <vector(8) short int> [(int16_t *)out_19(D) + ivtmp.33_50 * 1] = vect__12.17_80;
# DEBUG BEGIN_STMT
# DEBUG x => NULL
# DEBUG BEGIN_STMT
ivtmp.33_24 = ivtmp.33_50 + 16;
if (ivtmp.33_24 != _94)
_52 = cnt_16(D) & -8;
niters_vector_mult_vf.9_67 = (unsigned int) _52;
if (_32 == niters_vector_mult_vf.9_67)
# DEBUG x => _52
# DEBUG BEGIN_STMT
_2 = (long unsigned int) niters_vector_mult_vf.9_67;
_3 = _2 * 2;
_4 = in_17(D) + _3;
# VUSE <.MEM_83>
_5 = *_4;
_9 = (int) _5;
_10 = _8 * _9;
_11 = _10 >> 16;
_12 = out_19(D) + _3;
_21 = (short int) _11;
# .MEM_65 = VDEF <.MEM_83>
*_12 = _21;
# DEBUG BEGIN_STMT
x_75 = _52 + 1;
# DEBUG x => x_75
# DEBUG BEGIN_STMT
if (cnt_16(D) > x_75)
# DEBUG x => x_75
# DEBUG BEGIN_STMT
_33 = _3 + 2;
_34 = in_17(D) + _33;
# VUSE <.MEM_65>
_86 = *_34;
_87 = (int) _86;
_88 = _8 * _87;
_89 = _88 >> 16;
_90 = out_19(D) + _33;
_91 = (short int) _89;
# .MEM_92 = VDEF <.MEM_65>
*_90 = _91;
# DEBUG BEGIN_STMT
x_93 = _52 + 2;
# DEBUG x => x_93
# DEBUG BEGIN_STMT
if (cnt_16(D) > x_93)
# DEBUG x => x_93
# DEBUG BEGIN_STMT
_97 = _3 + 4;
_98 = in_17(D) + _97;
# VUSE <.MEM_92>
_99 = *_98;
_100 = (int) _99;
_101 = _8 * _100;
_102 = _101 >> 16;
_103 = out_19(D) + _97;
_104 = (short int) _102;
# .MEM_105 = VDEF <.MEM_92>
*_103 = _104;
# DEBUG BEGIN_STMT
x_106 = _52 + 3;
# DEBUG x => x_106
# DEBUG BEGIN_STMT
if (cnt_16(D) > x_106)
# DEBUG x => x_106
# DEBUG BEGIN_STMT
_110 = _3 + 6;
_111 = in_17(D) + _110;
# VUSE <.MEM_105>
_112 = *_111;
_113 = (int) _112;
_114 = _8 * _113;
_115 = _114 >> 16;
_116 = out_19(D) + _110;
_117 = (short int) _115;
# .MEM_118 = VDEF <.MEM_105>
*_116 = _117;
# DEBUG BEGIN_STMT
x_119 = _52 + 4;
# DEBUG x => x_119
# DEBUG BEGIN_STMT
if (cnt_16(D) > x_119)
# DEBUG x => x_119
# DEBUG BEGIN_STMT
_123 = _3 + 8;
_124 = in_17(D) + _123;
# VUSE <.MEM_118>
_125 = *_124;
_126 = (int) _125;
_127 = _8 * _126;
_128 = _127 >> 16;
_129 = out_19(D) + _123;
_130 = (short int) _128;
# .MEM_131 = VDEF <.MEM_118>
*_129 = _130;
# DEBUG BEGIN_STMT
x_132 = _52 + 5;
# DEBUG x => x_132
# DEBUG BEGIN_STMT
if (cnt_16(D) > x_132)
# DEBUG x => x_132
# DEBUG BEGIN_STMT
_136 = _3 + 10;
_137 = in_17(D) + _136;
# VUSE <.MEM_131>
_138 = *_137;
_139 = (int) _138;
_140 = _8 * _139;
_141 = _140 >> 16;
_142 = out_19(D) + _136;
_143 = (short int) _141;
# .MEM_144 = VDEF <.MEM_131>
*_142 = _143;
# DEBUG BEGIN_STMT
x_145 = _52 + 6;
# DEBUG x => x_145
# DEBUG BEGIN_STMT
if (cnt_16(D) > x_145)
# DEBUG x => x_145
# DEBUG BEGIN_STMT
_54 = _3 + 12;
_55 = in_17(D) + _54;
# VUSE <.MEM_144>
_56 = *_55;
_57 = (int) _56;
_58 = _8 * _57;
_59 = _58 >> 16;
_60 = out_19(D) + _54;
_61 = (short int) _59;
# .MEM_62 = VDEF <.MEM_144>
*_60 = _61;
# DEBUG BEGIN_STMT
# DEBUG x => _52 + 7
# DEBUG BEGIN_STMT
_146 = (sizetype) cnt_16(D);
_22 = _146 * 2;
# DEBUG x => (int) (ivtmp.28_23 /[ex] 2)
# DEBUG BEGIN_STMT
# VUSE <.MEM_13>
_41 = MEM[(int16_t *)in_17(D) + ivtmp.28_23 * 1];
_42 = (int) _41;
_43 = _8 * _42;
_44 = _43 >> 16;
_46 = (short int) _44;
# .MEM_47 = VDEF <.MEM_13>
MEM[(int16_t *)out_19(D) + ivtmp.28_23 * 1] = _46;
# DEBUG BEGIN_STMT
# DEBUG x => (int) (ivtmp.28_23 /[ex] 2) + 1
# DEBUG BEGIN_STMT
ivtmp.28_63 = ivtmp.28_23 + 2;
if (_22 != ivtmp.28_63)
# VUSE <.MEM_37>
return;
Statement Count for Function 'scale_samples': 165
=== Function Name: 'sum_sample' ===
=== Function Count: '4' ===
# DEBUG BEGIN_STMT
# DEBUG BEGIN_STMT
# DEBUG BEGIN_STMT
# DEBUG x => 0
# DEBUG BEGIN_STMT
_1 = (long unsigned int) x_7;
_2 = _1 * 2;
_3 = buff_10(D) + _2;
# VUSE <.MEM_9(D)>
_4 = *_3;
_5 = (int) _4;
t_11 = _5 + t_6;
# DEBUG t => t_11
# DEBUG BEGIN_STMT
x_12 = x_7 + 1;
# DEBUG x => x_12
# DEBUG x => x_7
# DEBUG t => t_6
# DEBUG BEGIN_STMT
if (x_7 != 50000000)
# DEBUG BEGIN_STMT
# VUSE <.MEM_9(D)>
return t_6;
Statement Count for Function 'sum_sample': 21


##### End ctyler diagnostics, start regular dump of current gimple #####


Function 1: 5 statements
Function 2: 24 statements
Function 3: 48 statements
Function 4: 165 statements
Function 5: 21 statements
__attribute__((target ("default"), target_clones ("default", "popcnt")))
void scale_samples (int16_t * in, int16_t * out, int cnt, int volume)
{
  sizetype ivtmp.33;
  sizetype ivtmp.28;
  vector(8) short int vect__12.17;
  vector(4) int vect__10.16;
  vector(4) int vect__9.15;
  vector(4) int vect__5.14;
  vector(8) short int vect__4.13;
  int tmp.10;
  unsigned int niters_vector_mult_vf.9;
  unsigned int bnd.8;
  int x;
  long unsigned int _2;
  long unsigned int _3;
  int16_t * _4;
  short int _5;
  int _6;
  int _7;
  int _8;
  int _9;
  int _10;
  int _11;
  int16_t * _12;
  short int _21;
  sizetype _22;
  sizetype _27;
  ssizetype _28;
  int16_t * _29;
  unsigned int _31;
  unsigned int _32;
  long unsigned int _33;
  int16_t * _34;
  sizetype _35;
  short int _41;
  int _42;
  int _43;
  int _44;
  short int _46;
  int _52;
  long unsigned int _54;
  int16_t * _55;
  short int _56;
  int _57;
  int _58;
  int _59;
  int16_t * _60;
  short int _61;
  vector(4) int _74;
  short int _86;
  int _87;
  int _88;
  int _89;
  int16_t * _90;
  short int _91;
  sizetype _94;
  long unsigned int _97;
  int16_t * _98;
  short int _99;
  int _100;
  int _101;
  int _102;
  int16_t * _103;
  short int _104;
  long unsigned int _110;
  int16_t * _111;
  short int _112;
  int _113;
  int _114;
  int _115;
  int16_t * _116;
  short int _117;
  long unsigned int _123;
  int16_t * _124;
  short int _125;
  int _126;
  int _127;
  int _128;
  int16_t * _129;
  short int _130;
  long unsigned int _136;
  int16_t * _137;
  short int _138;
  int _139;
  int _140;
  int _141;
  int16_t * _142;
  short int _143;
  sizetype _146;

  <bb 2> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG x => 0
  # DEBUG BEGIN_STMT
  if (cnt_16(D) > 0)
    goto <bb 3>; [89.00%]
  else
    goto <bb 20>; [11.00%]

  <bb 20> [local count: 12992276]:
  goto <bb 19>; [100.00%]

  <bb 3> [local count: 105119324]:
  _6 = volume_18(D) * 32767;
  _7 = _6 / 100;
  _8 = _7 << 1;
  _32 = (unsigned int) cnt_16(D);
  _31 = _32 + 4294967295;
  if (_31 > 6)
    goto <bb 4>; [89.44%]
  else
    goto <bb 21>; [10.56%]

  <bb 4> [local count: 94021582]:
  _29 = in_17(D) + 2;
  _28 = out_19(D) - _29;
  _27 = (sizetype) _28;
  if (_27 > 12)
    goto <bb 5>; [89.44%]
  else
    goto <bb 22>; [10.56%]

  <bb 22> [local count: 9926122]:
  goto <bb 15>; [100.00%]

  <bb 5> [local count: 84095460]:
  bnd.8_66 = _32 >> 3;
  _74 = {_8, _8, _8, _8};
  _35 = (sizetype) bnd.8_66;
  _94 = _35 * 16;

  <bb 6> [local count: 764504183]:
  # ivtmp.33_50 = PHI <ivtmp.33_24(23), 0(5)>
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  vect__4.13_71 = MEM <vector(8) short int> [(int16_t *)in_17(D) + ivtmp.33_50 * 1];
  vect__5.14_72 = [vec_unpack_lo_expr] vect__4.13_71;
  vect__5.14_73 = [vec_unpack_hi_expr] vect__4.13_71;
  vect__9.15_76 = vect__5.14_72 * _74;
  vect__9.15_77 = vect__5.14_73 * _74;
  vect__10.16_78 = vect__9.15_76 >> 16;
  vect__10.16_79 = vect__9.15_77 >> 16;
  vect__12.17_80 = VEC_PACK_TRUNC_EXPR <vect__10.16_78, vect__10.16_79>;
  MEM <vector(8) short int> [(int16_t *)out_19(D) + ivtmp.33_50 * 1] = vect__12.17_80;
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  ivtmp.33_24 = ivtmp.33_50 + 16;
  if (ivtmp.33_24 != _94)
    goto <bb 23>; [89.00%]
  else
    goto <bb 7>; [11.00%]

  <bb 23> [local count: 680408723]:
  goto <bb 6>; [100.00%]

  <bb 7> [local count: 84095460]:
  _52 = cnt_16(D) & -8;
  niters_vector_mult_vf.9_67 = (unsigned int) _52;
  if (_32 == niters_vector_mult_vf.9_67)
    goto <bb 24>; [12.50%]
  else
    goto <bb 8>; [87.50%]

  <bb 8> [local count: 73583527]:
  # DEBUG x => _52
  # DEBUG BEGIN_STMT
  _2 = (long unsigned int) niters_vector_mult_vf.9_67;
  _3 = _2 * 2;
  _4 = in_17(D) + _3;
  _5 = *_4;
  _9 = (int) _5;
  _10 = _8 * _9;
  _11 = _10 >> 16;
  _12 = out_19(D) + _3;
  _21 = (short int) _11;
  *_12 = _21;
  # DEBUG BEGIN_STMT
  x_75 = _52 + 1;
  # DEBUG x => x_75
  # DEBUG BEGIN_STMT
  if (cnt_16(D) > x_75)
    goto <bb 9>; [85.71%]
  else
    goto <bb 25>; [14.29%]

  <bb 25> [local count: 10511932]:
  goto <bb 17>; [100.00%]

  <bb 9> [local count: 63071596]:
  # DEBUG x => x_75
  # DEBUG BEGIN_STMT
  _33 = _3 + 2;
  _34 = in_17(D) + _33;
  _86 = *_34;
  _87 = (int) _86;
  _88 = _8 * _87;
  _89 = _88 >> 16;
  _90 = out_19(D) + _33;
  _91 = (short int) _89;
  *_90 = _91;
  # DEBUG BEGIN_STMT
  x_93 = _52 + 2;
  # DEBUG x => x_93
  # DEBUG BEGIN_STMT
  if (cnt_16(D) > x_93)
    goto <bb 10>; [85.71%]
  else
    goto <bb 26>; [14.29%]

  <bb 26> [local count: 9010228]:
  goto <bb 17>; [100.00%]

  <bb 10> [local count: 54061368]:
  # DEBUG x => x_93
  # DEBUG BEGIN_STMT
  _97 = _3 + 4;
  _98 = in_17(D) + _97;
  _99 = *_98;
  _100 = (int) _99;
  _101 = _8 * _100;
  _102 = _101 >> 16;
  _103 = out_19(D) + _97;
  _104 = (short int) _102;
  *_103 = _104;
  # DEBUG BEGIN_STMT
  x_106 = _52 + 3;
  # DEBUG x => x_106
  # DEBUG BEGIN_STMT
  if (cnt_16(D) > x_106)
    goto <bb 11>; [85.71%]
  else
    goto <bb 27>; [14.29%]

  <bb 27> [local count: 7723053]:
  goto <bb 17>; [100.00%]

  <bb 11> [local count: 46338317]:
  # DEBUG x => x_106
  # DEBUG BEGIN_STMT
  _110 = _3 + 6;
  _111 = in_17(D) + _110;
  _112 = *_111;
  _113 = (int) _112;
  _114 = _8 * _113;
  _115 = _114 >> 16;
  _116 = out_19(D) + _110;
  _117 = (short int) _115;
  *_116 = _117;
  # DEBUG BEGIN_STMT
  x_119 = _52 + 4;
  # DEBUG x => x_119
  # DEBUG BEGIN_STMT
  if (cnt_16(D) > x_119)
    goto <bb 12>; [85.71%]
  else
    goto <bb 28>; [14.29%]

  <bb 28> [local count: 6619760]:
  goto <bb 17>; [100.00%]

  <bb 12> [local count: 39718557]:
  # DEBUG x => x_119
  # DEBUG BEGIN_STMT
  _123 = _3 + 8;
  _124 = in_17(D) + _123;
  _125 = *_124;
  _126 = (int) _125;
  _127 = _8 * _126;
  _128 = _127 >> 16;
  _129 = out_19(D) + _123;
  _130 = (short int) _128;
  *_129 = _130;
  # DEBUG BEGIN_STMT
  x_132 = _52 + 5;
  # DEBUG x => x_132
  # DEBUG BEGIN_STMT
  if (cnt_16(D) > x_132)
    goto <bb 13>; [85.71%]
  else
    goto <bb 29>; [14.29%]

  <bb 29> [local count: 5674080]:
  goto <bb 17>; [100.00%]

  <bb 13> [local count: 34044478]:
  # DEBUG x => x_132
  # DEBUG BEGIN_STMT
  _136 = _3 + 10;
  _137 = in_17(D) + _136;
  _138 = *_137;
  _139 = (int) _138;
  _140 = _8 * _139;
  _141 = _140 >> 16;
  _142 = out_19(D) + _136;
  _143 = (short int) _141;
  *_142 = _143;
  # DEBUG BEGIN_STMT
  x_145 = _52 + 6;
  # DEBUG x => x_145
  # DEBUG BEGIN_STMT
  if (cnt_16(D) > x_145)
    goto <bb 14>; [85.71%]
  else
    goto <bb 30>; [14.29%]

  <bb 30> [local count: 4863497]:
  goto <bb 17>; [100.00%]

  <bb 14> [local count: 29180978]:
  # DEBUG x => x_145
  # DEBUG BEGIN_STMT
  _54 = _3 + 12;
  _55 = in_17(D) + _54;
  _56 = *_55;
  _57 = (int) _56;
  _58 = _8 * _57;
  _59 = _58 >> 16;
  _60 = out_19(D) + _54;
  _61 = (short int) _59;
  *_60 = _61;
  # DEBUG BEGIN_STMT
  # DEBUG x => _52 + 7
  # DEBUG BEGIN_STMT
  goto <bb 17>; [100.00%]

  <bb 21> [local count: 11097742]:

  <bb 15> [local count: 21023864]:
  _146 = (sizetype) cnt_16(D);
  _22 = _146 * 2;

  <bb 16> [local count: 191126041]:
  # ivtmp.28_23 = PHI <0(15), ivtmp.28_63(31)>
  # DEBUG x => (int) (ivtmp.28_23 /[ex] 2)
  # DEBUG BEGIN_STMT
  _41 = MEM[(int16_t *)in_17(D) + ivtmp.28_23 * 1];
  _42 = (int) _41;
  _43 = _8 * _42;
  _44 = _43 >> 16;
  _46 = (short int) _44;
  MEM[(int16_t *)out_19(D) + ivtmp.28_23 * 1] = _46;
  # DEBUG BEGIN_STMT
  # DEBUG x => (int) (ivtmp.28_23 /[ex] 2) + 1
  # DEBUG BEGIN_STMT
  ivtmp.28_63 = ivtmp.28_23 + 2;
  if (_22 != ivtmp.28_63)
    goto <bb 31>; [89.00%]
  else
    goto <bb 32>; [11.00%]

  <bb 32> [local count: 21023864]:
  goto <bb 18>; [100.00%]

  <bb 31> [local count: 170102177]:
  goto <bb 16>; [100.00%]

  <bb 24> [local count: 10511933]:

  <bb 17> [local count: 84095460]:

  <bb 18> [local count: 105119324]:

  <bb 19> [local count: 118111600]:
  return;

}



;; Function scale_samples.popcnt (scale_samples.popcnt, funcdef_no=25, decl_uid=3985, cgraph_uid=30, symbol_order=29)

=== Function Name: '__builtin_cpu_supports' ===
=== Function Count: '0' ===
=== Function Name: '__builtin_cpu_init' ===
=== Function Count: '0' ===
=== Function Name: 'scale_samples.resolver' ===
=== Function Count: '0' ===
# .MEM_2 = VDEF <.MEM_1(D)>
__builtin_cpu_init ();
_3 = __builtin_cpu_supports (&"popcnt"[0]);
if (_3 > 0)
# VUSE <.MEM_2>
return scale_samples.popcnt;
# VUSE <.MEM_2>
return scale_samples;
Statement Count for Function 'scale_samples.resolver': 5
=== Function Name: 'scale_samples' ===
=== Function Count: '1' ===
=== Function Name: 'scale_samples.popcnt' ===
=== Function Count: '1' ===
# DEBUG BEGIN_STMT
# DEBUG BEGIN_STMT
# DEBUG x => 0
# DEBUG BEGIN_STMT
if (cnt_18(D) > 0)
_9 = volume_8(D) * 32767;
_10 = _9 / 100;
_11 = _10 << 1;
_32 = (unsigned int) cnt_18(D);
_31 = _32 + 4294967295;
if (_31 > 6)
_29 = in_4(D) + 2;
_28 = out_14(D) - _29;
_27 = (sizetype) _28;
if (_27 > 12)
bnd.43_66 = _32 >> 3;
_74 = {_11, _11, _11, _11};
_35 = (sizetype) bnd.43_66;
_94 = _35 * 16;
# DEBUG x => NULL
# DEBUG BEGIN_STMT
# VUSE <.MEM_25>
vect__6.48_71 = MEM <vector(8) short int> [(int16_t *)in_4(D) + ivtmp.67_50 * 1];
vect__7.49_72 = [vec_unpack_lo_expr] vect__6.48_71;
vect__7.49_73 = [vec_unpack_hi_expr] vect__6.48_71;
vect__12.50_76 = vect__7.49_72 * _74;
vect__12.50_77 = vect__7.49_73 * _74;
vect__13.51_78 = vect__12.50_76 >> 16;
vect__13.51_79 = vect__12.50_77 >> 16;
vect__16.52_80 = VEC_PACK_TRUNC_EXPR <vect__13.51_78, vect__13.51_79>;
# .MEM_83 = VDEF <.MEM_25>
MEM <vector(8) short int> [(int16_t *)out_14(D) + ivtmp.67_50 * 1] = vect__16.52_80;
# DEBUG BEGIN_STMT
# DEBUG x => NULL
# DEBUG BEGIN_STMT
ivtmp.67_24 = ivtmp.67_50 + 16;
if (ivtmp.67_24 != _94)
_52 = cnt_18(D) & -8;
niters_vector_mult_vf.44_67 = (unsigned int) _52;
if (_32 == niters_vector_mult_vf.44_67)
# DEBUG x => _52
# DEBUG BEGIN_STMT
_3 = (long unsigned int) niters_vector_mult_vf.44_67;
_5 = _3 * 2;
_6 = in_4(D) + _5;
# VUSE <.MEM_83>
_7 = *_6;
_12 = (int) _7;
_13 = _11 * _12;
_15 = _13 >> 16;
_16 = out_14(D) + _5;
_17 = (short int) _15;
# .MEM_65 = VDEF <.MEM_83>
*_16 = _17;
# DEBUG BEGIN_STMT
x_75 = _52 + 1;
# DEBUG x => x_75
# DEBUG BEGIN_STMT
if (cnt_18(D) > x_75)
# DEBUG x => x_75
# DEBUG BEGIN_STMT
_33 = _5 + 2;
_34 = in_4(D) + _33;
# VUSE <.MEM_65>
_86 = *_34;
_87 = (int) _86;
_88 = _11 * _87;
_89 = _88 >> 16;
_90 = out_14(D) + _33;
_91 = (short int) _89;
# .MEM_92 = VDEF <.MEM_65>
*_90 = _91;
# DEBUG BEGIN_STMT
x_93 = _52 + 2;
# DEBUG x => x_93
# DEBUG BEGIN_STMT
if (cnt_18(D) > x_93)
# DEBUG x => x_93
# DEBUG BEGIN_STMT
_97 = _5 + 4;
_98 = in_4(D) + _97;
# VUSE <.MEM_92>
_99 = *_98;
_100 = (int) _99;
_101 = _11 * _100;
_102 = _101 >> 16;
_103 = out_14(D) + _97;
_104 = (short int) _102;
# .MEM_105 = VDEF <.MEM_92>
*_103 = _104;
# DEBUG BEGIN_STMT
x_106 = _52 + 3;
# DEBUG x => x_106
# DEBUG BEGIN_STMT
if (cnt_18(D) > x_106)
# DEBUG x => x_106
# DEBUG BEGIN_STMT
_110 = _5 + 6;
_111 = in_4(D) + _110;
# VUSE <.MEM_105>
_112 = *_111;
_113 = (int) _112;
_114 = _11 * _113;
_115 = _114 >> 16;
_116 = out_14(D) + _110;
_117 = (short int) _115;
# .MEM_118 = VDEF <.MEM_105>
*_116 = _117;
# DEBUG BEGIN_STMT
x_119 = _52 + 4;
# DEBUG x => x_119
# DEBUG BEGIN_STMT
if (cnt_18(D) > x_119)
# DEBUG x => x_119
# DEBUG BEGIN_STMT
_123 = _5 + 8;
_124 = in_4(D) + _123;
# VUSE <.MEM_118>
_125 = *_124;
_126 = (int) _125;
_127 = _11 * _126;
_128 = _127 >> 16;
_129 = out_14(D) + _123;
_130 = (short int) _128;
# .MEM_131 = VDEF <.MEM_118>
*_129 = _130;
# DEBUG BEGIN_STMT
x_132 = _52 + 5;
# DEBUG x => x_132
# DEBUG BEGIN_STMT
if (cnt_18(D) > x_132)
# DEBUG x => x_132
# DEBUG BEGIN_STMT
_136 = _5 + 10;
_137 = in_4(D) + _136;
# VUSE <.MEM_131>
_138 = *_137;
_139 = (int) _138;
_140 = _11 * _139;
_141 = _140 >> 16;
_142 = out_14(D) + _136;
_143 = (short int) _141;
# .MEM_144 = VDEF <.MEM_131>
*_142 = _143;
# DEBUG BEGIN_STMT
x_145 = _52 + 6;
# DEBUG x => x_145
# DEBUG BEGIN_STMT
if (cnt_18(D) > x_145)
# DEBUG x => x_145
# DEBUG BEGIN_STMT
_54 = _5 + 12;
_55 = in_4(D) + _54;
# VUSE <.MEM_144>
_56 = *_55;
_57 = (int) _56;
_58 = _11 * _57;
_59 = _58 >> 16;
_60 = out_14(D) + _54;
_61 = (short int) _59;
# .MEM_62 = VDEF <.MEM_144>
*_60 = _61;
# DEBUG BEGIN_STMT
# DEBUG x => _52 + 7
# DEBUG BEGIN_STMT
_146 = (sizetype) cnt_18(D);
_22 = _146 * 2;
# DEBUG x => (int) (ivtmp.63_23 /[ex] 2)
# DEBUG BEGIN_STMT
# VUSE <.MEM_1>
_41 = MEM[(int16_t *)in_4(D) + ivtmp.63_23 * 1];
_42 = (int) _41;
_43 = _11 * _42;
_44 = _43 >> 16;
_46 = (short int) _44;
# .MEM_47 = VDEF <.MEM_1>
MEM[(int16_t *)out_14(D) + ivtmp.63_23 * 1] = _46;
# DEBUG BEGIN_STMT
# DEBUG x => (int) (ivtmp.63_23 /[ex] 2) + 1
# DEBUG BEGIN_STMT
ivtmp.63_63 = ivtmp.63_23 + 2;
if (_22 != ivtmp.63_63)
# VUSE <.MEM_37>
return;
Statement Count for Function 'scale_samples.popcnt': 165
=== Function Name: 'printf' ===
=== Function Count: '2' ===
=== Function Name: 'vol_createsample' ===
=== Function Count: '2' ===
=== Function Name: 'calloc' ===
=== Function Count: '2' ===
=== Function Name: 'main' ===
=== Function Count: '2' ===
# DEBUG BEGIN_STMT
# DEBUG BEGIN_STMT
# DEBUG ttl => 0
# DEBUG BEGIN_STMT
# DEBUG BEGIN_STMT
# DEBUG BEGIN_STMT
# .MEM_2 = VDEF <.MEM_1(D)>
in_3 = calloc (50000000, 2);
# DEBUG in => in_3
# DEBUG BEGIN_STMT
# .MEM_4 = VDEF <.MEM_2>
out_5 = calloc (50000000, 2);
# DEBUG out => out_5
# DEBUG BEGIN_STMT
# .MEM_6 = VDEF <.MEM_4>
vol_createsample (in_3, 50000000);
# DEBUG BEGIN_STMT
# .MEM_7 = VDEF <.MEM_6>
scale_samples (in_3, out_5, 50000000, 50);
# DEBUG BEGIN_STMT
# DEBUG buff => out_5
# DEBUG samples => 50000000
# DEBUG INLINE_ENTRY sum_sample
# DEBUG BEGIN_STMT
# DEBUG BEGIN_STMT
# DEBUG BEGIN_STMT
# DEBUG x => 0
# DEBUG BEGIN_STMT
_10 = (long unsigned int) x_8;
_11 = _10 * 2;
_12 = out_5 + _11;
# VUSE <.MEM_7>
_13 = *_12;
_14 = (int) _13;
t_16 = _14 + t_15;
# DEBUG t => t_16
# DEBUG BEGIN_STMT
x_17 = x_8 + 1;
# DEBUG x => x_17
# DEBUG x => x_8
# DEBUG t => t_15
# DEBUG BEGIN_STMT
if (x_8 != 50000000)
# DEBUG BEGIN_STMT
# DEBUG buff => NULL
# DEBUG samples => NULL
# DEBUG x => NULL
# DEBUG t => NULL
# DEBUG ttl => t_15
# DEBUG BEGIN_STMT
# .MEM_9 = VDEF <.MEM_7>
printf ("Result: %d\n", t_15);
# DEBUG BEGIN_STMT
# VUSE <.MEM_9>
return 0;
Statement Count for Function 'main': 48
=== Function Name: 'scale_samples' ===
=== Function Count: '3' ===
=== Function Name: 'sum_sample' ===
=== Function Count: '3' ===
# DEBUG BEGIN_STMT
# DEBUG BEGIN_STMT
# DEBUG BEGIN_STMT
# DEBUG x => 0
# DEBUG BEGIN_STMT
_1 = (long unsigned int) x_7;
_2 = _1 * 2;
_3 = buff_10(D) + _2;
# VUSE <.MEM_9(D)>
_4 = *_3;
_5 = (int) _4;
t_11 = _5 + t_6;
# DEBUG t => t_11
# DEBUG BEGIN_STMT
x_12 = x_7 + 1;
# DEBUG x => x_12
# DEBUG x => x_7
# DEBUG t => t_6
# DEBUG BEGIN_STMT
if (x_7 != 50000000)
# DEBUG BEGIN_STMT
# VUSE <.MEM_9(D)>
return t_6;
Statement Count for Function 'sum_sample': 21


##### End ctyler diagnostics, start regular dump of current gimple #####


Function 1: 5 statements
Function 2: 165 statements
Function 3: 48 statements
Function 4: 21 statements
__attribute__((target ("popcnt"), target_clones ("default", "popcnt")))
void scale_samples.popcnt (int16_t * in, int16_t * out, int cnt, int volume)
{
  sizetype ivtmp.67;
  sizetype ivtmp.63;
  vector(8) short int vect__16.52;
  vector(4) int vect__13.51;
  vector(4) int vect__12.50;
  vector(4) int vect__7.49;
  vector(8) short int vect__6.48;
  int tmp.45;
  unsigned int niters_vector_mult_vf.44;
  unsigned int bnd.43;
  int x;
  long unsigned int _3;
  long unsigned int _5;
  int16_t * _6;
  short int _7;
  int _9;
  int _10;
  int _11;
  int _12;
  int _13;
  int _15;
  int16_t * _16;
  short int _17;
  sizetype _22;
  sizetype _27;
  ssizetype _28;
  int16_t * _29;
  unsigned int _31;
  unsigned int _32;
  long unsigned int _33;
  int16_t * _34;
  sizetype _35;
  short int _41;
  int _42;
  int _43;
  int _44;
  short int _46;
  int _52;
  long unsigned int _54;
  int16_t * _55;
  short int _56;
  int _57;
  int _58;
  int _59;
  int16_t * _60;
  short int _61;
  vector(4) int _74;
  short int _86;
  int _87;
  int _88;
  int _89;
  int16_t * _90;
  short int _91;
  sizetype _94;
  long unsigned int _97;
  int16_t * _98;
  short int _99;
  int _100;
  int _101;
  int _102;
  int16_t * _103;
  short int _104;
  long unsigned int _110;
  int16_t * _111;
  short int _112;
  int _113;
  int _114;
  int _115;
  int16_t * _116;
  short int _117;
  long unsigned int _123;
  int16_t * _124;
  short int _125;
  int _126;
  int _127;
  int _128;
  int16_t * _129;
  short int _130;
  long unsigned int _136;
  int16_t * _137;
  short int _138;
  int _139;
  int _140;
  int _141;
  int16_t * _142;
  short int _143;
  sizetype _146;

  <bb 2> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG x => 0
  # DEBUG BEGIN_STMT
  if (cnt_18(D) > 0)
    goto <bb 3>; [89.00%]
  else
    goto <bb 20>; [11.00%]

  <bb 20> [local count: 12992276]:
  goto <bb 19>; [100.00%]

  <bb 3> [local count: 105119324]:
  _9 = volume_8(D) * 32767;
  _10 = _9 / 100;
  _11 = _10 << 1;
  _32 = (unsigned int) cnt_18(D);
  _31 = _32 + 4294967295;
  if (_31 > 6)
    goto <bb 4>; [89.44%]
  else
    goto <bb 21>; [10.56%]

  <bb 4> [local count: 94021582]:
  _29 = in_4(D) + 2;
  _28 = out_14(D) - _29;
  _27 = (sizetype) _28;
  if (_27 > 12)
    goto <bb 5>; [89.44%]
  else
    goto <bb 22>; [10.56%]

  <bb 22> [local count: 9926122]:
  goto <bb 15>; [100.00%]

  <bb 5> [local count: 84095460]:
  bnd.43_66 = _32 >> 3;
  _74 = {_11, _11, _11, _11};
  _35 = (sizetype) bnd.43_66;
  _94 = _35 * 16;

  <bb 6> [local count: 764504183]:
  # ivtmp.67_50 = PHI <ivtmp.67_24(23), 0(5)>
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  vect__6.48_71 = MEM <vector(8) short int> [(int16_t *)in_4(D) + ivtmp.67_50 * 1];
  vect__7.49_72 = [vec_unpack_lo_expr] vect__6.48_71;
  vect__7.49_73 = [vec_unpack_hi_expr] vect__6.48_71;
  vect__12.50_76 = vect__7.49_72 * _74;
  vect__12.50_77 = vect__7.49_73 * _74;
  vect__13.51_78 = vect__12.50_76 >> 16;
  vect__13.51_79 = vect__12.50_77 >> 16;
  vect__16.52_80 = VEC_PACK_TRUNC_EXPR <vect__13.51_78, vect__13.51_79>;
  MEM <vector(8) short int> [(int16_t *)out_14(D) + ivtmp.67_50 * 1] = vect__16.52_80;
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  ivtmp.67_24 = ivtmp.67_50 + 16;
  if (ivtmp.67_24 != _94)
    goto <bb 23>; [89.00%]
  else
    goto <bb 7>; [11.00%]

  <bb 23> [local count: 680408723]:
  goto <bb 6>; [100.00%]

  <bb 7> [local count: 84095460]:
  _52 = cnt_18(D) & -8;
  niters_vector_mult_vf.44_67 = (unsigned int) _52;
  if (_32 == niters_vector_mult_vf.44_67)
    goto <bb 24>; [12.50%]
  else
    goto <bb 8>; [87.50%]

  <bb 8> [local count: 73583527]:
  # DEBUG x => _52
  # DEBUG BEGIN_STMT
  _3 = (long unsigned int) niters_vector_mult_vf.44_67;
  _5 = _3 * 2;
  _6 = in_4(D) + _5;
  _7 = *_6;
  _12 = (int) _7;
  _13 = _11 * _12;
  _15 = _13 >> 16;
  _16 = out_14(D) + _5;
  _17 = (short int) _15;
  *_16 = _17;
  # DEBUG BEGIN_STMT
  x_75 = _52 + 1;
  # DEBUG x => x_75
  # DEBUG BEGIN_STMT
  if (cnt_18(D) > x_75)
    goto <bb 9>; [85.71%]
  else
    goto <bb 25>; [14.29%]

  <bb 25> [local count: 10511932]:
  goto <bb 17>; [100.00%]

  <bb 9> [local count: 63071596]:
  # DEBUG x => x_75
  # DEBUG BEGIN_STMT
  _33 = _5 + 2;
  _34 = in_4(D) + _33;
  _86 = *_34;
  _87 = (int) _86;
  _88 = _11 * _87;
  _89 = _88 >> 16;
  _90 = out_14(D) + _33;
  _91 = (short int) _89;
  *_90 = _91;
  # DEBUG BEGIN_STMT
  x_93 = _52 + 2;
  # DEBUG x => x_93
  # DEBUG BEGIN_STMT
  if (cnt_18(D) > x_93)
    goto <bb 10>; [85.71%]
  else
    goto <bb 26>; [14.29%]

  <bb 26> [local count: 9010228]:
  goto <bb 17>; [100.00%]

  <bb 10> [local count: 54061368]:
  # DEBUG x => x_93
  # DEBUG BEGIN_STMT
  _97 = _5 + 4;
  _98 = in_4(D) + _97;
  _99 = *_98;
  _100 = (int) _99;
  _101 = _11 * _100;
  _102 = _101 >> 16;
  _103 = out_14(D) + _97;
  _104 = (short int) _102;
  *_103 = _104;
  # DEBUG BEGIN_STMT
  x_106 = _52 + 3;
  # DEBUG x => x_106
  # DEBUG BEGIN_STMT
  if (cnt_18(D) > x_106)
    goto <bb 11>; [85.71%]
  else
    goto <bb 27>; [14.29%]

  <bb 27> [local count: 7723053]:
  goto <bb 17>; [100.00%]

  <bb 11> [local count: 46338317]:
  # DEBUG x => x_106
  # DEBUG BEGIN_STMT
  _110 = _5 + 6;
  _111 = in_4(D) + _110;
  _112 = *_111;
  _113 = (int) _112;
  _114 = _11 * _113;
  _115 = _114 >> 16;
  _116 = out_14(D) + _110;
  _117 = (short int) _115;
  *_116 = _117;
  # DEBUG BEGIN_STMT
  x_119 = _52 + 4;
  # DEBUG x => x_119
  # DEBUG BEGIN_STMT
  if (cnt_18(D) > x_119)
    goto <bb 12>; [85.71%]
  else
    goto <bb 28>; [14.29%]

  <bb 28> [local count: 6619760]:
  goto <bb 17>; [100.00%]

  <bb 12> [local count: 39718557]:
  # DEBUG x => x_119
  # DEBUG BEGIN_STMT
  _123 = _5 + 8;
  _124 = in_4(D) + _123;
  _125 = *_124;
  _126 = (int) _125;
  _127 = _11 * _126;
  _128 = _127 >> 16;
  _129 = out_14(D) + _123;
  _130 = (short int) _128;
  *_129 = _130;
  # DEBUG BEGIN_STMT
  x_132 = _52 + 5;
  # DEBUG x => x_132
  # DEBUG BEGIN_STMT
  if (cnt_18(D) > x_132)
    goto <bb 13>; [85.71%]
  else
    goto <bb 29>; [14.29%]

  <bb 29> [local count: 5674080]:
  goto <bb 17>; [100.00%]

  <bb 13> [local count: 34044478]:
  # DEBUG x => x_132
  # DEBUG BEGIN_STMT
  _136 = _5 + 10;
  _137 = in_4(D) + _136;
  _138 = *_137;
  _139 = (int) _138;
  _140 = _11 * _139;
  _141 = _140 >> 16;
  _142 = out_14(D) + _136;
  _143 = (short int) _141;
  *_142 = _143;
  # DEBUG BEGIN_STMT
  x_145 = _52 + 6;
  # DEBUG x => x_145
  # DEBUG BEGIN_STMT
  if (cnt_18(D) > x_145)
    goto <bb 14>; [85.71%]
  else
    goto <bb 30>; [14.29%]

  <bb 30> [local count: 4863497]:
  goto <bb 17>; [100.00%]

  <bb 14> [local count: 29180978]:
  # DEBUG x => x_145
  # DEBUG BEGIN_STMT
  _54 = _5 + 12;
  _55 = in_4(D) + _54;
  _56 = *_55;
  _57 = (int) _56;
  _58 = _11 * _57;
  _59 = _58 >> 16;
  _60 = out_14(D) + _54;
  _61 = (short int) _59;
  *_60 = _61;
  # DEBUG BEGIN_STMT
  # DEBUG x => _52 + 7
  # DEBUG BEGIN_STMT
  goto <bb 17>; [100.00%]

  <bb 21> [local count: 11097742]:

  <bb 15> [local count: 21023864]:
  _146 = (sizetype) cnt_18(D);
  _22 = _146 * 2;

  <bb 16> [local count: 191126041]:
  # ivtmp.63_23 = PHI <0(15), ivtmp.63_63(31)>
  # DEBUG x => (int) (ivtmp.63_23 /[ex] 2)
  # DEBUG BEGIN_STMT
  _41 = MEM[(int16_t *)in_4(D) + ivtmp.63_23 * 1];
  _42 = (int) _41;
  _43 = _11 * _42;
  _44 = _43 >> 16;
  _46 = (short int) _44;
  MEM[(int16_t *)out_14(D) + ivtmp.63_23 * 1] = _46;
  # DEBUG BEGIN_STMT
  # DEBUG x => (int) (ivtmp.63_23 /[ex] 2) + 1
  # DEBUG BEGIN_STMT
  ivtmp.63_63 = ivtmp.63_23 + 2;
  if (_22 != ivtmp.63_63)
    goto <bb 31>; [89.00%]
  else
    goto <bb 32>; [11.00%]

  <bb 32> [local count: 21023864]:
  goto <bb 18>; [100.00%]

  <bb 31> [local count: 170102177]:
  goto <bb 16>; [100.00%]

  <bb 24> [local count: 10511933]:

  <bb 17> [local count: 84095460]:

  <bb 18> [local count: 105119324]:

  <bb 19> [local count: 118111600]:
  return;

}



;; Function sum_sample (sum_sample, funcdef_no=22, decl_uid=3942, cgraph_uid=23, symbol_order=22)

=== Function Name: '__builtin_cpu_supports' ===
=== Function Count: '0' ===
=== Function Name: '__builtin_cpu_init' ===
=== Function Count: '0' ===
=== Function Name: 'scale_samples.resolver' ===
=== Function Count: '0' ===
# .MEM_2 = VDEF <.MEM_1(D)>
__builtin_cpu_init ();
_3 = __builtin_cpu_supports (&"popcnt"[0]);
if (_3 > 0)
# VUSE <.MEM_2>
return scale_samples.popcnt;
# VUSE <.MEM_2>
return scale_samples;
Statement Count for Function 'scale_samples.resolver': 5
=== Function Name: 'scale_samples' ===
=== Function Count: '1' ===
=== Function Name: 'scale_samples.popcnt' ===
=== Function Count: '1' ===
=== Function Name: 'printf' ===
=== Function Count: '1' ===
=== Function Name: 'vol_createsample' ===
=== Function Count: '1' ===
=== Function Name: 'calloc' ===
=== Function Count: '1' ===
=== Function Name: 'main' ===
=== Function Count: '1' ===
# DEBUG BEGIN_STMT
# DEBUG BEGIN_STMT
# DEBUG ttl => 0
# DEBUG BEGIN_STMT
# DEBUG BEGIN_STMT
# DEBUG BEGIN_STMT
# .MEM_2 = VDEF <.MEM_1(D)>
in_3 = calloc (50000000, 2);
# DEBUG in => in_3
# DEBUG BEGIN_STMT
# .MEM_4 = VDEF <.MEM_2>
out_5 = calloc (50000000, 2);
# DEBUG out => out_5
# DEBUG BEGIN_STMT
# .MEM_6 = VDEF <.MEM_4>
vol_createsample (in_3, 50000000);
# DEBUG BEGIN_STMT
# .MEM_7 = VDEF <.MEM_6>
scale_samples (in_3, out_5, 50000000, 50);
# DEBUG BEGIN_STMT
# DEBUG buff => out_5
# DEBUG samples => 50000000
# DEBUG INLINE_ENTRY sum_sample
# DEBUG BEGIN_STMT
# DEBUG BEGIN_STMT
# DEBUG BEGIN_STMT
# DEBUG x => 0
# DEBUG BEGIN_STMT
_10 = (long unsigned int) x_8;
_11 = _10 * 2;
_12 = out_5 + _11;
# VUSE <.MEM_7>
_13 = *_12;
_14 = (int) _13;
t_16 = _14 + t_15;
# DEBUG t => t_16
# DEBUG BEGIN_STMT
x_17 = x_8 + 1;
# DEBUG x => x_17
# DEBUG x => x_8
# DEBUG t => t_15
# DEBUG BEGIN_STMT
if (x_8 != 50000000)
# DEBUG BEGIN_STMT
# DEBUG buff => NULL
# DEBUG samples => NULL
# DEBUG x => NULL
# DEBUG t => NULL
# DEBUG ttl => t_15
# DEBUG BEGIN_STMT
# .MEM_9 = VDEF <.MEM_7>
printf ("Result: %d\n", t_15);
# DEBUG BEGIN_STMT
# VUSE <.MEM_9>
return 0;
Statement Count for Function 'main': 48
=== Function Name: 'scale_samples' ===
=== Function Count: '2' ===
=== Function Name: 'sum_sample' ===
=== Function Count: '2' ===
# DEBUG BEGIN_STMT
# DEBUG BEGIN_STMT
# DEBUG BEGIN_STMT
# DEBUG x => 0
# DEBUG t => t_8(D)
# DEBUG BEGIN_STMT
ivtmp.88_15 = (unsigned long) buff_10(D);
_3 = ivtmp.88_15 + 100000000;
# DEBUG x => NULL
# DEBUG t => NULL
# DEBUG BEGIN_STMT
# DEBUG D#19 => D#20 * 2
# DEBUG D#18 => buff_10(D) + D#19
_1 = (void *) ivtmp.88_25;
# VUSE <.MEM_9(D)>
vect__4.78_19 = MEM <vector(8) short int> [(int16_t *)_1];
vect__5.79_18 = [vec_unpack_lo_expr] vect__4.78_19;
vect__5.79_16 = [vec_unpack_hi_expr] vect__4.78_19;
vect_t_11.81_13 = vect_t_15.80_14 + vect__5.79_18;
vect_t_11.81_7 = vect_t_11.81_13 + vect__5.79_16;
# DEBUG D#17 => *D#18
# DEBUG D#16 => (int) D#17
# DEBUG t => D#15
# DEBUG BEGIN_STMT
# DEBUG x => NULL
# DEBUG t => D#15
# DEBUG BEGIN_STMT
ivtmp.88_17 = ivtmp.88_25 + 16;
if (_3 != ivtmp.88_17)
_27 = .REDUC_PLUS (vect_t_11.81_7);
_28 = t_8(D) + _27;
# DEBUG BEGIN_STMT
# VUSE <.MEM_9(D)>
return _28;
Statement Count for Function 'sum_sample': 32


##### End ctyler diagnostics, start regular dump of current gimple #####


Function 1: 5 statements
Function 2: 48 statements
Function 3: 32 statements
int sum_sample (int16_t * buff, size_t samples)
{
  unsigned long ivtmp.88;
  vector(4) int vect_t_11.81;
  vector(4) int vect_t_15.80;
  vector(4) int vect__5.79;
  vector(8) short int vect__4.78;
  int t;
  void * _1;
  unsigned long _3;
  int _27;
  int _28;

  <bb 2> [local count: 10737416]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG x => 0
  # DEBUG t => t_8(D)
  # DEBUG BEGIN_STMT
  ivtmp.88_15 = (unsigned long) buff_10(D);
  _3 = ivtmp.88_15 + 100000000;

  <bb 3> [local count: 1063004408]:
  # vect_t_15.80_14 = PHI <vect_t_11.81_7(5), { 0, 0, 0, 0 }(2)>
  # ivtmp.88_25 = PHI <ivtmp.88_17(5), ivtmp.88_15(2)>
  # DEBUG x => NULL
  # DEBUG t => NULL
  # DEBUG BEGIN_STMT
  # DEBUG D#19 => D#20 * 2
  # DEBUG D#18 => buff_10(D) + D#19
  _1 = (void *) ivtmp.88_25;
  vect__4.78_19 = MEM <vector(8) short int> [(int16_t *)_1];
  vect__5.79_18 = [vec_unpack_lo_expr] vect__4.78_19;
  vect__5.79_16 = [vec_unpack_hi_expr] vect__4.78_19;
  vect_t_11.81_13 = vect_t_15.80_14 + vect__5.79_18;
  vect_t_11.81_7 = vect_t_11.81_13 + vect__5.79_16;
  # DEBUG D#17 => *D#18
  # DEBUG D#16 => (int) D#17
  # DEBUG t => D#15
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG t => D#15
  # DEBUG BEGIN_STMT
  ivtmp.88_17 = ivtmp.88_25 + 16;
  if (_3 != ivtmp.88_17)
    goto <bb 5>; [98.99%]
  else
    goto <bb 4>; [1.01%]

  <bb 5> [local count: 1052266995]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 10737416]:
  _27 = .REDUC_PLUS (vect_t_11.81_7);
  _28 = t_8(D) + _27;
  # DEBUG BEGIN_STMT
  return _28;

}



;; Function scale_samples.resolver (scale_samples.resolver, funcdef_no=27, decl_uid=3994, cgraph_uid=32, symbol_order=31)

=== Function Name: '__builtin_cpu_supports' ===
=== Function Count: '0' ===
=== Function Name: '__builtin_cpu_init' ===
=== Function Count: '0' ===
=== Function Name: 'scale_samples.resolver' ===
=== Function Count: '0' ===
# .MEM_2 = VDEF <.MEM_1(D)>
__builtin_cpu_init ();
_3 = __builtin_cpu_supports (&"popcnt"[0]);
if (_3 > 0)
# VUSE <.MEM_2>
return scale_samples.popcnt;
# VUSE <.MEM_2>
return scale_samples;
Statement Count for Function 'scale_samples.resolver': 5
=== Function Name: 'scale_samples' ===
=== Function Count: '1' ===
=== Function Name: 'scale_samples.popcnt' ===
=== Function Count: '1' ===
=== Function Name: 'printf' ===
=== Function Count: '1' ===
=== Function Name: 'vol_createsample' ===
=== Function Count: '1' ===
=== Function Name: 'calloc' ===
=== Function Count: '1' ===
=== Function Name: 'main' ===
=== Function Count: '1' ===
# DEBUG BEGIN_STMT
# DEBUG BEGIN_STMT
# DEBUG ttl => 0
# DEBUG BEGIN_STMT
# DEBUG BEGIN_STMT
# DEBUG BEGIN_STMT
# .MEM_2 = VDEF <.MEM_1(D)>
in_3 = calloc (50000000, 2);
# DEBUG in => in_3
# DEBUG BEGIN_STMT
# .MEM_4 = VDEF <.MEM_2>
out_5 = calloc (50000000, 2);
# DEBUG out => out_5
# DEBUG BEGIN_STMT
# .MEM_6 = VDEF <.MEM_4>
vol_createsample (in_3, 50000000);
# DEBUG BEGIN_STMT
# .MEM_7 = VDEF <.MEM_6>
scale_samples (in_3, out_5, 50000000, 50);
# DEBUG BEGIN_STMT
# DEBUG buff => out_5
# DEBUG samples => 50000000
# DEBUG INLINE_ENTRY sum_sample
# DEBUG BEGIN_STMT
# DEBUG BEGIN_STMT
# DEBUG BEGIN_STMT
# DEBUG x => 0
# DEBUG BEGIN_STMT
_10 = (long unsigned int) x_8;
_11 = _10 * 2;
_12 = out_5 + _11;
# VUSE <.MEM_7>
_13 = *_12;
_14 = (int) _13;
t_16 = _14 + t_15;
# DEBUG t => t_16
# DEBUG BEGIN_STMT
x_17 = x_8 + 1;
# DEBUG x => x_17
# DEBUG x => x_8
# DEBUG t => t_15
# DEBUG BEGIN_STMT
if (x_8 != 50000000)
# DEBUG BEGIN_STMT
# DEBUG buff => NULL
# DEBUG samples => NULL
# DEBUG x => NULL
# DEBUG t => NULL
# DEBUG ttl => t_15
# DEBUG BEGIN_STMT
# .MEM_9 = VDEF <.MEM_7>
printf ("Result: %d\n", t_15);
# DEBUG BEGIN_STMT
# VUSE <.MEM_9>
return 0;
Statement Count for Function 'main': 48
=== Function Name: 'scale_samples' ===
=== Function Count: '2' ===
=== Function Name: 'sum_sample' ===
=== Function Count: '2' ===


##### End ctyler diagnostics, start regular dump of current gimple #####


Function 1: 5 statements
Function 2: 48 statements
__attribute__((returns_nonnull))
void * scale_samples.resolver ()
{
  int _3;

  <bb 2> [local count: 1073741824]:
  __builtin_cpu_init ();
  _3 = __builtin_cpu_supports (&"popcnt"[0]);
  if (_3 > 0)
    goto <bb 3>; [100.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [local count: 1073741824]:
  return scale_samples.popcnt;

  <bb 4> [count: 0]:
  return scale_samples;

}



;; Function main (main, funcdef_no=24, decl_uid=3961, cgraph_uid=25, symbol_order=24) (executed once)

=== Function Name: '__builtin_cpu_supports' ===
=== Function Count: '0' ===
=== Function Name: '__builtin_cpu_init' ===
=== Function Count: '0' ===
=== Function Name: 'scale_samples.resolver' ===
=== Function Count: '0' ===
=== Function Name: 'scale_samples' ===
=== Function Count: '0' ===
=== Function Name: 'scale_samples.popcnt' ===
=== Function Count: '0' ===
=== Function Name: 'printf' ===
=== Function Count: '0' ===
=== Function Name: 'vol_createsample' ===
=== Function Count: '0' ===
=== Function Name: 'calloc' ===
=== Function Count: '0' ===
=== Function Name: 'main' ===
=== Function Count: '0' ===
# DEBUG BEGIN_STMT
# DEBUG BEGIN_STMT
# DEBUG ttl => 0
# DEBUG BEGIN_STMT
# DEBUG BEGIN_STMT
# DEBUG BEGIN_STMT
# .MEM_2 = VDEF <.MEM_1(D)>
in_3 = calloc (50000000, 2);
# DEBUG in => in_3
# DEBUG BEGIN_STMT
# .MEM_4 = VDEF <.MEM_2>
out_5 = calloc (50000000, 2);
# DEBUG out => out_5
# DEBUG BEGIN_STMT
# .MEM_6 = VDEF <.MEM_4>
vol_createsample (in_3, 50000000);
# DEBUG BEGIN_STMT
# .MEM_7 = VDEF <.MEM_6>
scale_samples (in_3, out_5, 50000000, 50);
# DEBUG BEGIN_STMT
# DEBUG buff => out_5
# DEBUG samples => 50000000
# DEBUG INLINE_ENTRY sum_sample
# DEBUG BEGIN_STMT
# DEBUG BEGIN_STMT
# DEBUG BEGIN_STMT
# DEBUG x => 0
# DEBUG t => t_18(D)
# DEBUG BEGIN_STMT
ivtmp.109_21 = (unsigned long) out_5;
_12 = ivtmp.109_21 + 100000000;
# DEBUG x => NULL
# DEBUG t => NULL
# DEBUG BEGIN_STMT
# DEBUG D#26 => D#27 * 2
# DEBUG D#25 => out_5 + D#26
_10 = (void *) ivtmp.109_31;
# VUSE <.MEM_7>
vect__13.99_25 = MEM <vector(8) short int> [(int16_t *)_10];
vect__14.100_24 = [vec_unpack_lo_expr] vect__13.99_25;
vect__14.100_23 = [vec_unpack_hi_expr] vect__13.99_25;
vect_t_16.102_19 = vect_t_22.101_20 + vect__14.100_24;
vect_t_16.102_15 = vect_t_16.102_19 + vect__14.100_23;
# DEBUG D#24 => *D#25
# DEBUG D#23 => (int) D#24
# DEBUG t => D#22
# DEBUG BEGIN_STMT
# DEBUG x => NULL
# DEBUG t => D#22
# DEBUG BEGIN_STMT
ivtmp.109_22 = ivtmp.109_31 + 16;
if (_12 != ivtmp.109_22)
_33 = .REDUC_PLUS (vect_t_16.102_15);
_34 = t_18(D) + _33;
# DEBUG BEGIN_STMT
# DEBUG buff => NULL
# DEBUG samples => NULL
# DEBUG x => NULL
# DEBUG t => NULL
# DEBUG ttl => _34
# DEBUG BEGIN_STMT
# .MEM_9 = VDEF <.MEM_7>
printf ("Result: %d\n", _34);
# DEBUG BEGIN_STMT
# VUSE <.MEM_9>
return 0;
Statement Count for Function 'main': 59
=== Function Name: 'scale_samples' ===
=== Function Count: '1' ===
=== Function Name: 'sum_sample' ===
=== Function Count: '1' ===


##### End ctyler diagnostics, start regular dump of current gimple #####


Function 1: 59 statements
int main ()
{
  unsigned long ivtmp.109;
  vector(4) int vect_t_16.102;
  vector(4) int vect_t_22.101;
  vector(4) int vect__14.100;
  vector(8) short int vect__13.99;
  int t;
  int16_t * out;
  int16_t * in;
  void * _10;
  unsigned long _12;
  int _33;
  int _34;

  <bb 2> [local count: 10737416]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG ttl => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  in_3 = calloc (50000000, 2);
  # DEBUG in => in_3
  # DEBUG BEGIN_STMT
  out_5 = calloc (50000000, 2);
  # DEBUG out => out_5
  # DEBUG BEGIN_STMT
  vol_createsample (in_3, 50000000);
  # DEBUG BEGIN_STMT
  scale_samples (in_3, out_5, 50000000, 50);
  # DEBUG BEGIN_STMT
  # DEBUG buff => out_5
  # DEBUG samples => 50000000
  # DEBUG INLINE_ENTRY sum_sample
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG x => 0
  # DEBUG t => t_18(D)
  # DEBUG BEGIN_STMT
  ivtmp.109_21 = (unsigned long) out_5;
  _12 = ivtmp.109_21 + 100000000;

  <bb 3> [local count: 1063004408]:
  # vect_t_22.101_20 = PHI <vect_t_16.102_15(5), { 0, 0, 0, 0 }(2)>
  # ivtmp.109_31 = PHI <ivtmp.109_22(5), ivtmp.109_21(2)>
  # DEBUG x => NULL
  # DEBUG t => NULL
  # DEBUG BEGIN_STMT
  # DEBUG D#26 => D#27 * 2
  # DEBUG D#25 => out_5 + D#26
  _10 = (void *) ivtmp.109_31;
  vect__13.99_25 = MEM <vector(8) short int> [(int16_t *)_10];
  vect__14.100_24 = [vec_unpack_lo_expr] vect__13.99_25;
  vect__14.100_23 = [vec_unpack_hi_expr] vect__13.99_25;
  vect_t_16.102_19 = vect_t_22.101_20 + vect__14.100_24;
  vect_t_16.102_15 = vect_t_16.102_19 + vect__14.100_23;
  # DEBUG D#24 => *D#25
  # DEBUG D#23 => (int) D#24
  # DEBUG t => D#22
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG t => D#22
  # DEBUG BEGIN_STMT
  ivtmp.109_22 = ivtmp.109_31 + 16;
  if (_12 != ivtmp.109_22)
    goto <bb 5>; [98.99%]
  else
    goto <bb 4>; [1.01%]

  <bb 5> [local count: 1052266995]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 10737416]:
  _33 = .REDUC_PLUS (vect_t_16.102_15);
  _34 = t_18(D) + _33;
  # DEBUG BEGIN_STMT
  # DEBUG buff => NULL
  # DEBUG samples => NULL
  # DEBUG x => NULL
  # DEBUG t => NULL
  # DEBUG ttl => _34
  # DEBUG BEGIN_STMT
  printf ("Result: %d\n", _34);
  # DEBUG BEGIN_STMT
  return 0;

}


